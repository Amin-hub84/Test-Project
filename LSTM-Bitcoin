import requests
import pandas as pd
import numpy as np
import time
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
import datetime

def fetch_btc_data_binance(symbol="BTCUSDT", interval="1d", limit=1800):
    url = "https://api.binance.com/api/v3/klines"
    params = {
        "symbol": symbol,
        "interval": interval,
        "limit": limit
    }
    
    response = requests.get(url, params=params)
    if response.status_code == 200:
        data = response.json()
        df = pd.DataFrame(data, columns=[
            'timestamp', 'open', 'high', 'low', 'close', 'volume', '_', '__', '___', '____', '_____', '______'
        ])
        df = df[['timestamp', 'close']]
        df.columns = ['timestamp', 'price']
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        df.set_index('timestamp', inplace=True)
        df['price'] = df['price'].astype(float)
        return df
    else:
        raise ValueError(f"Failed to fetch data. Status code: {response.status_code}")

start_time = time.time()

try:
    df = fetch_btc_data_binance()
    if df is None or df.empty:
        raise ValueError("Fetched data is empty.")
    print(df.head())
except Exception as e:
    print("Error:", e)

scaler = MinMaxScaler(feature_range=(0, 1))
df['price'] = scaler.fit_transform(df[['price']])

def create_sequences(data, seq_length=50):
    X, y = [], []
    for i in range(len(data) - seq_length):
        X.append(data[i:i+seq_length])
        y.append(data[i+seq_length])
    return np.array(X), np.array(y)

seq_length = 50
data = df['price'].values
X, y = create_sequences(data, seq_length)

split = int(0.8 * len(X))
X_train, X_test = X[:split], X[split:]
y_train, y_test = y[:split], y[split:]

X_train = X_train.reshape((X_train.shape[0], X_train.shape[1], 1))
X_test = X_test.reshape((X_test.shape[0], X_test.shape[1], 1))

model = Sequential([
    LSTM(64, return_sequences=True, input_shape=(seq_length, 1)),
    Dropout(0.2),
    LSTM(64),
    Dropout(0.2),
    Dense(1)
])

model.compile(optimizer='adam', loss='mean_squared_error')

model.fit(X_train, y_train, epochs=100, batch_size=32, validation_data=(X_test, y_test))

predictions = model.predict(X_test)
predictions = scaler.inverse_transform(predictions)

y_test_actual = scaler.inverse_transform(y_test.reshape(-1, 1))

mae = mean_absolute_error(y_test_actual, predictions)
rmse = np.sqrt(mean_squared_error(y_test_actual, predictions))
r2 = r2_score(y_test_actual, predictions)

end_time = time.time()
execution_time = end_time - start_time

plt.figure(figsize=(12, 6))
plt.plot(y_test_actual, label="Actual Price", color='blue')
plt.plot(predictions, label="Predicted Price", color='red')
plt.title(f"Bitcoin Price Prediction using LSTM\nMAE: {mae:.2f} | RMSE: {rmse:.2f} | R² Score: {r2:.4f}\nExecution Time: {execution_time:.2f} sec")
plt.xlabel("Time")
plt.ylabel("Price (USD)")
plt.legend()
plt.show()

future_days = 30
last_sequence = data[-seq_length:].reshape(1, seq_length, 1)
future_predictions = []

for _ in range(future_days):
    predicted_price = model.predict(last_sequence)[0][0]
    future_predictions.append(predicted_price)
    last_sequence = np.roll(last_sequence, -1)
    last_sequence[0, -1, 0] = predicted_price

future_predictions = scaler.inverse_transform(np.array(future_predictions).reshape(-1, 1))

last_date = df.index[-1]
future_dates = pd.date_range(last_date + pd.Timedelta(days=1), periods=future_days)

plt.figure(figsize=(12, 6))
plt.plot(df.index[-100:], scaler.inverse_transform(df['price'].values[-100:].reshape(-1, 1)), label="Historical Prices", color='blue')
plt.plot(future_dates, future_predictions, label="Future Predictions", color='green', linestyle='dashed')
plt.title("Bitcoin Price Prediction for Next Month")
plt.xlabel("Date")
plt.ylabel("Price (USD)")
plt.legend()
plt.show()

print(f"Execution Time: {execution_time:.2f} seconds")
print(f"Mean Absolute Error (MAE): {mae:.2f}")
print(f"Root Mean Squared Error (RMSE): {rmse:.2f}")
print(f"R² Score: {r2:.4f}")